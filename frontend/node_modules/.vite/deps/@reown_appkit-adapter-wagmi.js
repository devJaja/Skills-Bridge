import {
  ChainNotConfiguredError,
  ProviderNotFoundError,
  connect,
  createConfig,
  createConnector,
  disconnect,
  estimateGas,
  getAccount,
  getBalance,
  getConnections,
  injected,
  prepareTransactionRequest,
  reconnect,
  sendTransaction,
  signMessage,
  switchChain,
  waitForTransactionReceipt,
  watchAccount,
  watchConnections,
  watchConnectors,
  watchPendingTransactions,
  writeContract
} from "./chunk-RXUOY7WH.js";
import "./chunk-EWXW2D35.js";
import "./chunk-ZO77EUZE.js";
import {
  AdapterBlueprint,
  W3mFrameProviderSingleton,
  WalletConnectConnector,
  WcHelpersUtil
} from "./chunk-TGK6L4V2.js";
import "./chunk-W6WSQ7JV.js";
import "./chunk-FF44UITQ.js";
import "./chunk-HLWUFTJA.js";
import "./chunk-E4XKPBCR.js";
import {
  CaipNetworksUtil,
  ErrorUtil,
  HelpersUtil,
  PresetsUtil
} from "./chunk-AY3E3D5T.js";
import {
  AlertController,
  ChainController,
  ConnectorController,
  CoreHelperUtil,
  OptionsController,
  SIWXUtil,
  StorageUtil,
  getActiveCaipNetwork,
  getPreferredAccountType,
  subscribeKey
} from "./chunk-WJUHZOS4.js";
import {
  proxy
} from "./chunk-LQH6MSRX.js";
import "./chunk-Q666IA43.js";
import "./chunk-WLSVP57H.js";
import "./chunk-ANJCMEYS.js";
import "./chunk-2YULO2GZ.js";
import "./chunk-TAKRCD4B.js";
import "./chunk-DF2FOQV5.js";
import "./chunk-7LMDMJQJ.js";
import {
  parseUnits
} from "./chunk-6WACAMLS.js";
import "./chunk-IDC4ZXGW.js";
import "./chunk-SYLL3SQI.js";
import "./chunk-KASMAJTU.js";
import "./chunk-WX6CO7XQ.js";
import "./chunk-6GOASCKB.js";
import "./chunk-BCNN2GVT.js";
import "./chunk-PFTOPCXV.js";
import {
  ConstantsUtil,
  NetworkUtil
} from "./chunk-AFKSH5YO.js";
import "./chunk-OWINAXAL.js";
import "./chunk-FZS6HOUP.js";
import {
  SwitchChainError,
  UserRejectedRequestError,
  formatUnits,
  getAddress,
  numberToHex
} from "./chunk-WX5QCCWZ.js";
import "./chunk-F3M2F5R6.js";
import "./chunk-5UBV5ZHI.js";
import "./chunk-MMN2DTB3.js";

// node_modules/@reown/appkit-adapter-wagmi/dist/esm/src/connectors/AuthConnector.js
function authConnector(parameters) {
  let currentAccounts = [];
  let socialProvider = void 0;
  let connectSocialPromise = void 0;
  function parseChainId(chainId) {
    return NetworkUtil.parseEvmChainId(chainId) || 1;
  }
  function getProviderInstance() {
    if (!socialProvider) {
      socialProvider = W3mFrameProviderSingleton.getInstance({
        projectId: parameters.options.projectId,
        chainId: getActiveCaipNetwork()?.caipNetworkId,
        enableLogger: parameters.options.enableAuthLogger,
        onTimeout: (reason) => {
          if (reason === "iframe_load_failed") {
            AlertController.open(ErrorUtil.ALERT_ERRORS.IFRAME_LOAD_FAILED, "error");
          } else if (reason === "iframe_request_timeout") {
            AlertController.open(ErrorUtil.ALERT_ERRORS.IFRAME_REQUEST_TIMEOUT, "error");
          } else if (reason === "unverified_domain") {
            AlertController.open(ErrorUtil.ALERT_ERRORS.UNVERIFIED_DOMAIN, "error");
          }
        },
        abortController: ErrorUtil.EmbeddedWalletAbortController,
        getActiveCaipNetwork: (namespace) => getActiveCaipNetwork(namespace),
        getCaipNetworks: (namespace) => ChainController.getCaipNetworks(namespace)
      });
    }
    return socialProvider;
  }
  async function connectSocial(options = {}) {
    const provider = getProviderInstance();
    let chainId = options.chainId;
    if (options.isReconnecting) {
      const lastUsedChainId = NetworkUtil.parseEvmChainId(provider.getLastUsedChainId() || "");
      const defaultChainId = parameters.chains?.[0].id;
      chainId = lastUsedChainId || defaultChainId;
      if (!chainId) {
        throw new Error("ChainId not found in provider");
      }
    }
    const preferredAccountType = getPreferredAccountType("eip155");
    const { address, chainId: frameChainId, accounts } = await SIWXUtil.authConnectorAuthenticate({
      authConnector: provider,
      chainId,
      preferredAccountType,
      socialUri: options.socialUri,
      chainNamespace: ConstantsUtil.CHAIN.EVM
    });
    currentAccounts = accounts?.map((a) => a.address) || [address];
    const parsedChainId = parseChainId(frameChainId);
    return {
      accounts: currentAccounts,
      account: address,
      chainId: parsedChainId,
      chain: {
        id: parsedChainId,
        unsuported: false
      }
    };
  }
  return createConnector((config) => ({
    id: ConstantsUtil.CONNECTOR_ID.AUTH,
    name: ConstantsUtil.CONNECTOR_NAMES.AUTH,
    type: "AUTH",
    chain: ConstantsUtil.CHAIN.EVM,
    async connect(options = {}) {
      if (connectSocialPromise) {
        return connectSocialPromise;
      }
      if (!connectSocialPromise) {
        connectSocialPromise = new Promise((resolve) => {
          resolve(connectSocial(options));
        });
      }
      const result = await connectSocialPromise;
      connectSocialPromise = void 0;
      return result;
    },
    async disconnect() {
      const provider = await this.getProvider();
      await provider.disconnect();
    },
    getAccounts() {
      if (!currentAccounts?.length) {
        return Promise.resolve([]);
      }
      config.emitter.emit("change", { accounts: currentAccounts });
      return Promise.resolve(currentAccounts);
    },
    async getProvider() {
      if (!this.provider) {
        this.provider = W3mFrameProviderSingleton.getInstance({
          projectId: parameters.options.projectId,
          chainId: getActiveCaipNetwork()?.caipNetworkId,
          enableLogger: parameters.options.enableAuthLogger,
          abortController: ErrorUtil.EmbeddedWalletAbortController,
          onTimeout: (reason) => {
            if (reason === "iframe_load_failed") {
              AlertController.open(ErrorUtil.ALERT_ERRORS.IFRAME_LOAD_FAILED, "error");
            } else if (reason === "iframe_request_timeout") {
              AlertController.open(ErrorUtil.ALERT_ERRORS.IFRAME_REQUEST_TIMEOUT, "error");
            } else if (reason === "unverified_domain") {
              AlertController.open(ErrorUtil.ALERT_ERRORS.UNVERIFIED_DOMAIN, "error");
            }
          },
          getActiveCaipNetwork: (namespace) => getActiveCaipNetwork(namespace),
          getCaipNetworks: (namespace) => ChainController.getCaipNetworks(namespace)
        });
      }
      return Promise.resolve(this.provider);
    },
    async getChainId() {
      const provider = await this.getProvider();
      const { chainId } = await provider.getChainId();
      return parseChainId(chainId);
    },
    async isAuthorized() {
      const activeChain = ChainController.state.activeChain;
      const isActiveChainEvm = activeChain === ConstantsUtil.CHAIN.EVM;
      const isAnyAuthConnected = ConstantsUtil.AUTH_CONNECTOR_SUPPORTED_CHAINS.some((chain) => ConnectorController.getConnectorId(chain) === ConstantsUtil.CONNECTOR_ID.AUTH);
      if (isAnyAuthConnected && !isActiveChainEvm) {
        return false;
      }
      const provider = await this.getProvider();
      return Promise.resolve(provider.getLoginEmailUsed());
    },
    async switchChain({ chainId }) {
      try {
        const chain = config.chains.find((c) => c.id === chainId);
        if (!chain) {
          throw new SwitchChainError(new Error("chain not found on connector."));
        }
        const provider = await this.getProvider();
        const preferredAccountType = getPreferredAccountType("eip155");
        const response = await provider.connect({
          chainId,
          preferredAccountType
        });
        currentAccounts = response?.accounts?.map((a) => a.address) || [
          response.address
        ];
        config.emitter.emit("change", {
          chainId: Number(chainId),
          accounts: currentAccounts
        });
        return chain;
      } catch (error) {
        if (error instanceof Error) {
          throw new SwitchChainError(error);
        }
        throw error;
      }
    },
    onAccountsChanged(accounts) {
      if (accounts.length === 0) {
        this.onDisconnect();
      } else {
        config.emitter.emit("change", { accounts: accounts.map(getAddress) });
      }
    },
    onChainChanged(chain) {
      const chainId = Number(chain);
      config.emitter.emit("change", { chainId });
    },
    async onDisconnect(_error) {
      const provider = await this.getProvider();
      await provider.disconnect();
    }
  }));
}

// node_modules/@reown/appkit-adapter-wagmi/dist/esm/src/connectors/WalletConnectConnector.js
walletConnect.type = "walletConnect";
function walletConnect(parameters, appKit) {
  const isNewChainsStale = parameters.isNewChainsStale ?? true;
  let provider_;
  let accountsChanged;
  let chainChanged;
  let connect2;
  let displayUri;
  let sessionDelete;
  let disconnect2;
  return createConnector((config) => ({
    id: "walletConnect",
    name: "WalletConnect",
    type: walletConnect.type,
    async setup() {
      const provider = await this.getProvider().catch(() => null);
      if (!provider) {
        return;
      }
      if (!connect2) {
        connect2 = this.onConnect.bind(this);
        provider.on("connect", connect2);
      }
      if (!sessionDelete) {
        sessionDelete = this.onSessionDelete.bind(this);
        provider.on("session_delete", sessionDelete);
      }
    },
    async connect({ ...rest } = {}) {
      try {
        const caipNetworks = ChainController.getCaipNetworks();
        const provider = await this.getProvider();
        if (!provider) {
          throw new ProviderNotFoundError();
        }
        if (!displayUri) {
          displayUri = this.onDisplayUri;
          provider.on("display_uri", displayUri);
        }
        const isChainsStale = await this.isChainsStale();
        if (provider.session && isChainsStale) {
          await provider.disconnect();
        }
        const universalProviderConfigOverride = OptionsController.state.universalProviderConfigOverride;
        if (!provider.session || isChainsStale) {
          const namespaces = WcHelpersUtil.createNamespaces(caipNetworks, universalProviderConfigOverride);
          await provider.connect({
            optionalNamespaces: namespaces,
            ..."pairingTopic" in rest ? { pairingTopic: rest.pairingTopic } : {}
          });
          this.setRequestedChainsIds(caipNetworks.map((x) => Number(x.id)));
        }
        const accounts = await this.getAccounts();
        const requestChainId = await this.getChainId();
        const chains = provider.session?.namespaces?.["eip155"]?.chains;
        const isRequestedChainSupported = chains?.some((chain) => Number(chain.split(":")[1]) === requestChainId);
        let currentChainId = 1;
        if (isRequestedChainSupported) {
          currentChainId = requestChainId;
        } else if (chains?.[0]) {
          currentChainId = Number(chains[0].split(":")[1]);
        }
        if (displayUri) {
          provider.removeListener("display_uri", displayUri);
          displayUri = void 0;
        }
        if (connect2) {
          provider.removeListener("connect", connect2);
          connect2 = void 0;
        }
        if (!accountsChanged) {
          accountsChanged = this.onAccountsChanged.bind(this);
          provider.on("accountsChanged", accountsChanged);
        }
        if (!chainChanged) {
          chainChanged = this.onChainChanged.bind(this);
          provider.on("chainChanged", chainChanged);
        }
        if (!disconnect2) {
          disconnect2 = this.onDisconnect.bind(this);
          provider.on("disconnect", disconnect2);
        }
        if (!sessionDelete) {
          sessionDelete = this.onSessionDelete.bind(this);
          provider.on("session_delete", sessionDelete);
        }
        const defaultChain = universalProviderConfigOverride?.defaultChain;
        provider.setDefaultChain(defaultChain ?? `eip155:${currentChainId}`);
        return { accounts, chainId: currentChainId };
      } catch (error) {
        if (/(user rejected|connection request reset)/i.test(error?.message)) {
          throw new UserRejectedRequestError(error);
        }
        throw error;
      }
    },
    async disconnect() {
      const provider = await this.getProvider();
      try {
        await provider?.disconnect();
      } catch (error) {
        if (!/No matching key/i.test(error.message)) {
          throw error;
        }
      } finally {
        if (chainChanged) {
          provider?.removeListener("chainChanged", chainChanged);
          chainChanged = void 0;
        }
        if (disconnect2) {
          provider?.removeListener("disconnect", disconnect2);
          disconnect2 = void 0;
        }
        if (!connect2) {
          connect2 = this.onConnect.bind(this);
          provider?.on("connect", connect2);
        }
        if (accountsChanged) {
          provider?.removeListener("accountsChanged", accountsChanged);
          accountsChanged = void 0;
        }
        if (sessionDelete) {
          provider?.removeListener("session_delete", sessionDelete);
          sessionDelete = void 0;
        }
        this.setRequestedChainsIds([]);
      }
    },
    async getAccounts() {
      const provider = await this.getProvider();
      if (!provider?.session?.namespaces) {
        return [];
      }
      const accountsList = provider?.session?.namespaces[ConstantsUtil.CHAIN.EVM]?.accounts;
      const accounts = accountsList?.map((account) => account.split(":")[2]) ?? [];
      const accountsAdded = /* @__PURE__ */ new Set();
      const deduplicatedAccounts = accounts.filter((account) => {
        const lowerCasedAccount = account?.toLowerCase();
        if (accountsAdded.has(lowerCasedAccount)) {
          return false;
        }
        accountsAdded.add(lowerCasedAccount);
        return true;
      });
      return deduplicatedAccounts;
    },
    async getProvider({ chainId } = {}) {
      if (!provider_) {
        provider_ = await appKit.getUniversalProvider();
        provider_?.events.setMaxListeners(Number.POSITIVE_INFINITY);
      }
      const activeNamespace = StorageUtil.getActiveNamespace();
      const currentChainId = appKit.getCaipNetwork()?.id;
      if (chainId && currentChainId !== chainId && activeNamespace) {
        const storedCaipNetworkId = StorageUtil.getStoredActiveCaipNetworkId();
        const appKitCaipNetworks = activeNamespace ? appKit.getCaipNetworks(activeNamespace) : [];
        const storedCaipNetwork = appKitCaipNetworks?.find((n) => n.id === storedCaipNetworkId);
        if (storedCaipNetwork && storedCaipNetwork.chainNamespace === ConstantsUtil.CHAIN.EVM) {
          await this.switchChain?.({ chainId: Number(storedCaipNetwork.id) });
        }
      }
      return provider_;
    },
    async getChainId() {
      const chainId = appKit.getCaipNetwork(ConstantsUtil.CHAIN.EVM)?.id;
      if (chainId) {
        return chainId;
      }
      const provider = await this.getProvider();
      const chain = provider.session?.namespaces[ConstantsUtil.CHAIN.EVM]?.chains?.[0];
      const network = ChainController.getCaipNetworks().find((c) => c.id === chain);
      return network?.id;
    },
    async isAuthorized() {
      try {
        const [accounts, provider] = await Promise.all([this.getAccounts(), this.getProvider()]);
        if (!accounts.length) {
          return false;
        }
        const isChainsStale = await this.isChainsStale();
        if (isChainsStale && provider.session) {
          await provider.disconnect().catch(() => {
          });
          return false;
        }
        return true;
      } catch {
        return false;
      }
    },
    async switchChain({ addEthereumChainParameter, chainId }) {
      const provider = await this.getProvider();
      if (!provider) {
        throw new ProviderNotFoundError();
      }
      const chainToSwitch = ChainController.getCaipNetworks().find((x) => x.id === chainId);
      if (!chainToSwitch) {
        throw new SwitchChainError(new ChainNotConfiguredError());
      }
      try {
        await provider.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: numberToHex(chainId) }]
        });
        if (chainToSwitch?.caipNetworkId) {
          provider.setDefaultChain(chainToSwitch?.caipNetworkId);
        }
        config.emitter.emit("change", { chainId: Number(chainId) });
        const requestedChains = await this.getRequestedChainsIds();
        this.setRequestedChainsIds([...requestedChains, chainId]);
        return { ...chainToSwitch, id: chainToSwitch.id };
      } catch (err) {
        const error = err;
        if (/(?:user rejected)/iu.test(error.message)) {
          throw new UserRejectedRequestError(error);
        }
        try {
          let blockExplorerUrls;
          if (addEthereumChainParameter?.blockExplorerUrls) {
            blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;
          } else {
            blockExplorerUrls = chainToSwitch.blockExplorers?.default.url ? [chainToSwitch.blockExplorers?.default.url] : [];
          }
          const rpcUrls = chainToSwitch.rpcUrls?.["chainDefault"]?.http || [];
          const addEthereumChain = {
            blockExplorerUrls,
            chainId: numberToHex(chainId),
            chainName: chainToSwitch.name,
            iconUrls: addEthereumChainParameter?.iconUrls,
            nativeCurrency: chainToSwitch.nativeCurrency,
            rpcUrls
          };
          await provider.request({
            method: "wallet_addEthereumChain",
            params: [addEthereumChain]
          });
          const requestedChains = await this.getRequestedChainsIds();
          this.setRequestedChainsIds([...requestedChains, chainId]);
          return { ...chainToSwitch, id: chainToSwitch.id };
        } catch (e) {
          throw new UserRejectedRequestError(e);
        }
      }
    },
    onAccountsChanged(accounts) {
      if (accounts.length === 0) {
        this.onDisconnect();
      } else {
        config.emitter.emit("change", {
          accounts: accounts.map((x) => getAddress(x))
        });
      }
    },
    onChainChanged(chain) {
      const chainId = Number(chain);
      config.emitter.emit("change", { chainId });
    },
    onConnect(_connectInfo) {
      this.setRequestedChainsIds(ChainController.getCaipNetworks().map((x) => Number(x.id)));
    },
    async onDisconnect(_error) {
      this.setRequestedChainsIds([]);
      config.emitter.emit("disconnect");
      const provider = await this.getProvider();
      if (accountsChanged) {
        provider.removeListener("accountsChanged", accountsChanged);
        accountsChanged = void 0;
      }
      if (chainChanged) {
        provider.removeListener("chainChanged", chainChanged);
        chainChanged = void 0;
      }
      if (disconnect2) {
        provider.removeListener("disconnect", disconnect2);
        disconnect2 = void 0;
      }
      if (sessionDelete) {
        provider.removeListener("session_delete", sessionDelete);
        sessionDelete = void 0;
      }
      if (!connect2) {
        connect2 = this.onConnect.bind(this);
        provider.on("connect", connect2);
      }
    },
    onDisplayUri(uri) {
      config.emitter.emit("message", { type: "display_uri", data: uri });
    },
    onSessionDelete() {
      this.onDisconnect();
    },
    getNamespaceChainsIds() {
      if (!provider_?.session?.namespaces) {
        return [];
      }
      const accounts = provider_?.session?.namespaces[ConstantsUtil.CHAIN.EVM]?.accounts;
      const chainIds = accounts?.map((account) => Number.parseInt(account.split(":")[1] ?? "")) ?? [];
      return chainIds;
    },
    async getRequestedChainsIds() {
      const chainIds = await config.storage?.getItem(this.requestedChainsStorageKey) ?? [];
      return [...new Set(chainIds)];
    },
    async isChainsStale() {
      if (!isNewChainsStale) {
        return false;
      }
      const connectorChains = config.chains.map((x) => x.id);
      const namespaceChains = this.getNamespaceChainsIds();
      if (namespaceChains.length && !namespaceChains.some((id) => connectorChains.includes(id))) {
        return false;
      }
      const requestedChains = await this.getRequestedChainsIds();
      return !connectorChains.every((id) => requestedChains.includes(Number(id)));
    },
    async setRequestedChainsIds(chains) {
      await config.storage?.setItem(this.requestedChainsStorageKey, chains);
    },
    get requestedChainsStorageKey() {
      return `${this.id}.requestedChains`;
    }
  }));
}

// node_modules/@reown/appkit-adapter-wagmi/dist/esm/src/utils/LimitterUtil.js
var state = proxy({
  pendingTransactions: 0
});
var LimitterUtil = {
  state,
  subscribeKey(key, callback) {
    return subscribeKey(state, key, callback);
  },
  increase(value) {
    state[value] += 1;
  },
  decrease(value) {
    state[value] -= 1;
  },
  reset(value) {
    state[value] = 0;
  }
};

// node_modules/@reown/appkit-adapter-wagmi/dist/esm/src/utils/helpers.js
async function getSafeConnector(connectors) {
  if (CoreHelperUtil.isSafeApp()) {
    const { safe } = await import("./exports-4NE54LL6.js");
    if (safe && !connectors.some((c) => c.type === "safe")) {
      const safeConnector = safe();
      return safeConnector;
    }
  }
  return null;
}
async function getCoinbaseConnector(connectors) {
  try {
    const { coinbaseWallet } = await import("./exports-4NE54LL6.js");
    if (coinbaseWallet && !connectors.some((c) => c.id === "coinbaseWalletSDK")) {
      return coinbaseWallet();
    }
  } catch (error) {
    console.error("Failed to import Coinbase Wallet SDK:", error);
  }
  return null;
}

// node_modules/@reown/appkit-adapter-wagmi/dist/esm/src/client.js
var DEFAULT_PENDING_TRANSACTIONS_FILTER = {
  enable: false,
  pollingInterval: 3e4
};
var WagmiAdapter = class extends AdapterBlueprint {
  constructor(configParams) {
    const networks = CaipNetworksUtil.extendCaipNetworks(configParams.networks, {
      projectId: configParams.projectId,
      customNetworkImageUrls: {},
      customRpcUrls: configParams.customRpcUrls
    });
    super();
    this.balancePromises = {};
    this.namespace = ConstantsUtil.CHAIN.EVM;
    this.adapterType = ConstantsUtil.ADAPTER_TYPES.WAGMI;
    this.projectId = configParams.projectId;
    this.pendingTransactionsFilter = {
      ...DEFAULT_PENDING_TRANSACTIONS_FILTER,
      ...configParams.pendingTransactionsFilter ?? {}
    };
    this.createConfig({ ...configParams, networks });
    this.checkChainId();
  }
  construct(_options) {
    this.checkChainId();
    this.setupWatchers();
  }
  async getAccounts(params) {
    const connector = this.getWagmiConnector(params.id);
    if (!connector) {
      return { accounts: [] };
    }
    if (connector.id === ConstantsUtil.CONNECTOR_ID.AUTH) {
      const provider = await connector.getProvider();
      if (!provider?.user) {
        return { accounts: [] };
      }
      const { address: address2, accounts } = provider.user;
      return Promise.resolve({
        accounts: (accounts || [{ address: address2, type: "eoa" }]).map((account) => CoreHelperUtil.createAccount("eip155", account.address, account.type))
      });
    }
    const { addresses, address } = getAccount(this.wagmiConfig);
    return Promise.resolve({
      accounts: [...new Set(addresses || [address])]?.map((val) => CoreHelperUtil.createAccount("eip155", val || "", "eoa"))
    });
  }
  checkChainId() {
    const { chainId } = getAccount(this.wagmiConfig);
    if (chainId) {
      this.emit("switchNetwork", {
        chainId
      });
    }
  }
  getWagmiConnector(id) {
    return this.wagmiConfig.connectors.find((c) => c.id === id);
  }
  createConfig(configParams) {
    this.wagmiChains = configParams.networks.filter((caipNetwork) => caipNetwork.chainNamespace === ConstantsUtil.CHAIN.EVM);
    const transports = {};
    const connectors = [...configParams.connectors ?? []];
    this.wagmiChains.forEach((element) => {
      const fromTransportProp = configParams.transports?.[element.id];
      const caipNetworkId = CaipNetworksUtil.getCaipNetworkId(element);
      if (fromTransportProp) {
        transports[element.id] = CaipNetworksUtil.extendWagmiTransports(element, configParams.projectId, fromTransportProp);
      } else {
        transports[element.id] = CaipNetworksUtil.getViemTransport(element, configParams.projectId, configParams.customRpcUrls?.[caipNetworkId]);
      }
    });
    this.wagmiConfig = createConfig({
      ...configParams,
      chains: this.wagmiChains,
      connectors,
      transports
    });
  }
  setupWatchPendingTransactions() {
    if (!this.pendingTransactionsFilter.enable || this.unwatchPendingTransactions) {
      return;
    }
    this.unwatchPendingTransactions = watchPendingTransactions(this.wagmiConfig, {
      pollingInterval: this.pendingTransactionsFilter.pollingInterval,
      onError: () => {
      },
      onTransactions: () => {
        this.emit("pendingTransactions");
        LimitterUtil.increase("pendingTransactions");
      }
    });
    const unsubscribe = LimitterUtil.subscribeKey("pendingTransactions", (val) => {
      if (val >= ConstantsUtil.LIMITS.PENDING_TRANSACTIONS) {
        this.unwatchPendingTransactions?.();
        unsubscribe();
      }
    });
  }
  setupWatchers() {
    watchConnections(this.wagmiConfig, {
      onChange: (connections) => {
        this.clearConnections();
        this.addConnection(...connections.map((connection) => {
          const caipNetwork = this.getCaipNetworks().find((network) => network.id === connection.chainId);
          const isAuth = connection.connector.id === ConstantsUtil.CONNECTOR_ID.AUTH;
          return {
            accounts: connection.accounts.map((account) => ({
              address: account
            })),
            caipNetwork,
            connectorId: connection.connector.id,
            auth: isAuth ? {
              name: StorageUtil.getConnectedSocialProvider(),
              username: StorageUtil.getConnectedSocialUsername()
            } : void 0
          };
        }));
      }
    });
    watchAccount(this.wagmiConfig, {
      onChange: (accountData, prevAccountData) => {
        if (accountData.status === "disconnected" && prevAccountData.address) {
          this.emit("disconnect");
        }
        if (accountData?.chainId && accountData?.chainId !== prevAccountData?.chainId) {
          this.emit("switchNetwork", {
            chainId: accountData.chainId
          });
        }
        if (accountData.status === "connected") {
          const hasAccountChanged = accountData.address !== prevAccountData?.address;
          const hasConnectorChanged = accountData.connector.id !== prevAccountData.connector?.id;
          const hasConnectionStatusChanged = prevAccountData.status !== "connected";
          if (hasAccountChanged || hasConnectorChanged || hasConnectionStatusChanged) {
            this.setupWatchPendingTransactions();
            this.handleAccountChanged({
              address: accountData.address,
              chainId: accountData.chainId,
              connector: accountData.connector
            });
          }
        }
      }
    });
  }
  async addThirdPartyConnectors(options) {
    const thirdPartyConnectors = [];
    if (options.enableCoinbase !== false) {
      const coinbaseConnector = await getCoinbaseConnector(this.wagmiConfig.connectors);
      if (coinbaseConnector) {
        thirdPartyConnectors.push(coinbaseConnector);
      }
    }
    const safeConnector = await getSafeConnector(this.wagmiConfig.connectors);
    if (safeConnector) {
      thirdPartyConnectors.push(safeConnector);
    }
    await Promise.all(thirdPartyConnectors.map((connector) => {
      const cnctr = this.wagmiConfig._internal.connectors.setup(connector);
      this.wagmiConfig._internal.connectors.setState((prev) => [...prev, cnctr]);
      return this.addWagmiConnector(cnctr, options);
    }));
  }
  addWagmiConnectors(options, appKit) {
    const customConnectors = [];
    if (options.enableWalletConnect !== false) {
      customConnectors.push(walletConnect(options, appKit));
    }
    if (options.enableEIP6963 !== false) {
      customConnectors.push(injected({ shimDisconnect: true }));
    }
    const isEmailEnabled = appKit?.remoteFeatures?.email ?? true;
    const socialsEnabled = Array.isArray(appKit?.remoteFeatures?.socials) && appKit?.remoteFeatures?.socials?.length > 0;
    if (isEmailEnabled || socialsEnabled) {
      customConnectors.push(authConnector({
        chains: this.wagmiChains,
        options: { projectId: options.projectId, enableAuthLogger: options.enableAuthLogger }
      }));
    }
    customConnectors.forEach((connector) => {
      const cnctr = this.wagmiConfig._internal.connectors.setup(connector);
      this.wagmiConfig._internal.connectors.setState((prev) => [...prev, cnctr]);
    });
  }
  async handleAccountChanged({ address, chainId, connector }) {
    if (!this.namespace) {
      throw new Error("WagmiAdapter:handleAccountChanged - namespace is required");
    }
    const provider = await connector.getProvider().catch(() => void 0);
    this.emit("accountChanged", {
      address,
      chainId,
      connector: {
        id: connector.id,
        name: PresetsUtil.ConnectorNamesMap[connector.id] ?? connector.name,
        imageId: PresetsUtil.ConnectorImageIds[connector.id],
        type: PresetsUtil.ConnectorTypesMap[connector.type] ?? "EXTERNAL",
        info: connector.id === ConstantsUtil.CONNECTOR_ID.INJECTED ? void 0 : { rdns: connector.id },
        provider,
        chain: this.namespace,
        chains: []
      }
    });
  }
  async signMessage(params) {
    try {
      const signature = await signMessage(this.wagmiConfig, {
        message: params.message,
        account: params.address
      });
      return { signature };
    } catch (error) {
      throw new Error("WagmiAdapter:signMessage - Sign message failed");
    }
  }
  async sendTransaction(params) {
    const { chainId, address } = getAccount(this.wagmiConfig);
    const txParams = {
      account: address,
      to: params.to,
      value: Number.isNaN(Number(params.value)) ? BigInt(0) : BigInt(params.value),
      gas: params.gas ? BigInt(params.gas) : void 0,
      gasPrice: params.gasPrice ? BigInt(params.gasPrice) : void 0,
      data: params.data,
      chainId,
      type: "legacy",
      parameters: ["nonce"]
    };
    await prepareTransactionRequest(this.wagmiConfig, txParams);
    const tx = await sendTransaction(this.wagmiConfig, txParams);
    await waitForTransactionReceipt(this.wagmiConfig, { hash: tx, timeout: 25e3 });
    return { hash: tx };
  }
  async writeContract(params) {
    const { caipNetwork, ...data } = params;
    const chainId = Number(NetworkUtil.caipNetworkIdToNumber(caipNetwork.caipNetworkId));
    const tx = await writeContract(this.wagmiConfig, {
      chain: this.wagmiChains?.[chainId],
      chainId,
      address: data.tokenAddress,
      account: data.fromAddress,
      abi: data.abi,
      functionName: data.method,
      args: data.args,
      __mode: "prepared"
    });
    return { hash: tx };
  }
  async estimateGas(params) {
    try {
      const result = await estimateGas(this.wagmiConfig, {
        account: params.address,
        to: params.to,
        data: params.data,
        type: "legacy"
      });
      return { gas: result };
    } catch (error) {
      throw new Error("WagmiAdapter:estimateGas - error estimating gas");
    }
  }
  parseUnits(params) {
    return parseUnits(params.value, params.decimals);
  }
  formatUnits(params) {
    return formatUnits(params.value, params.decimals);
  }
  async addWagmiConnector(connector, options) {
    if (!this.namespace) {
      throw new Error("WagmiAdapter:addWagmiConnector - namespace is required");
    }
    if (connector.type === ConstantsUtil.CONNECTOR_ID.INJECTED && options.enableEIP6963 === false) {
      return;
    }
    if (connector.id === ConstantsUtil.CONNECTOR_ID.AUTH || connector.id === ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT) {
      return;
    }
    const provider = await connector.getProvider().catch(() => void 0);
    this.addConnector({
      id: connector.id,
      explorerId: PresetsUtil.ConnectorExplorerIds[connector.id],
      imageUrl: options?.connectorImages?.[connector.id] ?? connector.icon,
      name: PresetsUtil.ConnectorNamesMap[connector.id] ?? connector.name,
      imageId: PresetsUtil.ConnectorImageIds[connector.id],
      type: PresetsUtil.ConnectorTypesMap[connector.type] ?? "EXTERNAL",
      info: connector.id === ConstantsUtil.CONNECTOR_ID.INJECTED ? void 0 : { rdns: connector.id },
      provider,
      chain: this.namespace,
      chains: []
    });
  }
  async syncConnectors(options, appKit) {
    watchConnectors(this.wagmiConfig, {
      onChange: (connectors) => {
        connectors.forEach((connector) => this.addWagmiConnector(connector, options));
      }
    });
    this.addWagmiConnectors(options, appKit);
    await Promise.all(this.wagmiConfig.connectors.map((connector) => this.addWagmiConnector(connector, options)));
    this.addThirdPartyConnectors(options);
  }
  async syncConnections() {
    return Promise.resolve();
  }
  async syncConnection(params) {
    const { id, chainId } = params;
    const connections = getConnections(this.wagmiConfig);
    const connection = connections.find((c) => c.connector.id === id);
    const connector = this.getWagmiConnector(id);
    const provider = await connector?.getProvider();
    const isSafeApp = CoreHelperUtil.isSafeApp();
    if (isSafeApp && id === ConstantsUtil.CONNECTOR_ID.SAFE && !connection?.accounts.length) {
      const safeAppConnector = this.getWagmiConnector("safe");
      if (safeAppConnector) {
        const res = await connect(this.wagmiConfig, {
          connector: safeAppConnector,
          chainId: Number(chainId)
        });
        const safeProvider = await safeAppConnector.getProvider();
        return {
          chainId: Number(chainId),
          address: res.accounts[0],
          provider: safeProvider,
          type: connection?.connector.type?.toUpperCase(),
          id: connection?.connector.id
        };
      }
    }
    return {
      chainId: Number(connection?.chainId),
      address: connection?.accounts[0],
      provider,
      type: connection?.connector.type?.toUpperCase(),
      id: connection?.connector.id
    };
  }
  async connectWalletConnect(chainId) {
    const walletConnectConnector = this.getWalletConnectConnector();
    await walletConnectConnector.authenticate();
    const wagmiConnector = this.getWagmiConnector("walletConnect");
    if (!wagmiConnector) {
      throw new Error("UniversalAdapter:connectWalletConnect - connector not found");
    }
    const res = await connect(this.wagmiConfig, {
      connector: wagmiConnector,
      chainId: chainId ? Number(chainId) : void 0
    });
    if (res.chainId !== Number(chainId)) {
      await switchChain(this.wagmiConfig, { chainId: res.chainId });
    }
    return { clientId: await walletConnectConnector.provider.client.core.crypto.getClientId() };
  }
  async connect(params) {
    const { id, address, provider, type, info, chainId, socialUri } = params;
    const connector = this.getWagmiConnector(id);
    if (!connector) {
      throw new Error("connectionControllerClient:connectExternal - connector is undefined");
    }
    if (provider && info && connector.id === ConstantsUtil.CONNECTOR_ID.EIP6963) {
      connector.setEip6963Wallet?.({ provider, info });
    }
    const connection = this.wagmiConfig.state?.connections?.get(connector.uid);
    if (connection) {
      await this.wagmiConfig.storage?.setItem("recentConnectorId", connector.id);
      const sortedAccounts = [...connection.accounts].sort((a, b) => {
        if (HelpersUtil.isLowerCaseMatch(a, address)) {
          return -1;
        }
        if (HelpersUtil.isLowerCaseMatch(b, address)) {
          return 1;
        }
        return 0;
      });
      this.wagmiConfig?.setState((x) => ({
        ...x,
        connections: new Map(x.connections).set(connector.uid, {
          accounts: sortedAccounts,
          chainId: connection.chainId,
          connector: connection.connector
        }),
        current: connector.uid,
        status: "connected"
      }));
      return {
        address: sortedAccounts[0],
        chainId: connection.chainId,
        provider,
        type,
        id
      };
    }
    const res = await connect(this.wagmiConfig, {
      connector,
      chainId: chainId ? Number(chainId) : void 0,
      socialUri
    });
    return {
      address: res.accounts[0],
      chainId: res.chainId,
      provider,
      type,
      id
    };
  }
  get connections() {
    return Array.from(this.wagmiConfig.state.connections.values()).map((connection) => ({
      accounts: connection.accounts.map((account) => ({
        address: account
      })),
      connectorId: connection.connector.id
    }));
  }
  async reconnect(params) {
    const { id } = params;
    const connector = this.getWagmiConnector(id);
    if (!connector) {
      throw new Error("connectionControllerClient:connectExternal - connector is undefined");
    }
    await reconnect(this.wagmiConfig, {
      connectors: [connector]
    });
  }
  async getBalance(params) {
    const address = params.address;
    const caipNetwork = this.getCaipNetworks().find((network) => network.id === params.chainId);
    if (!address) {
      return Promise.resolve({ balance: "0.00", symbol: "ETH" });
    }
    if (caipNetwork && this.wagmiConfig) {
      const caipAddress = `${caipNetwork.caipNetworkId}:${params.address}`;
      const cachedPromise = this.balancePromises[caipAddress];
      if (cachedPromise) {
        return cachedPromise;
      }
      const cachedBalance = StorageUtil.getNativeBalanceCacheForCaipAddress(caipAddress);
      if (cachedBalance) {
        return { balance: cachedBalance.balance, symbol: cachedBalance.symbol };
      }
      this.balancePromises[caipAddress] = new Promise(async (resolve) => {
        try {
          const chainId = Number(params.chainId);
          const balance = await getBalance(this.wagmiConfig, {
            address: params.address,
            chainId,
            token: params.tokens?.[caipNetwork.caipNetworkId]?.address
          });
          StorageUtil.updateNativeBalanceCache({
            caipAddress,
            balance: balance.formatted,
            symbol: balance.symbol,
            timestamp: Date.now()
          });
          resolve({ balance: balance.formatted, symbol: balance.symbol });
        } catch (error) {
          console.warn("Appkit:WagmiAdapter:getBalance - Error getting balance", error);
          resolve({ balance: "0.00", symbol: "ETH" });
        }
      }).finally(() => {
        delete this.balancePromises[caipAddress];
      });
      return this.balancePromises[caipAddress] || { balance: "0.00", symbol: "ETH" };
    }
    return { balance: "", symbol: "" };
  }
  getWalletConnectProvider() {
    return this.getWagmiConnector("walletConnect")?.["provider"];
  }
  async disconnect(params) {
    if (params.id) {
      const connector = this.getWagmiConnector(params.id);
      const connections = getConnections(this.wagmiConfig);
      const connection = connections.find((c) => HelpersUtil.isLowerCaseMatch(c.connector.id, params.id));
      await disconnect(this.wagmiConfig, { connector });
      if (OptionsController.state.enableReconnect === false) {
        this.deleteConnection(params.id);
      }
      if (connection) {
        return {
          connections: [
            {
              accounts: connection.accounts.map((account) => ({
                address: account
              })),
              connectorId: connection.connector.id
            }
          ]
        };
      }
      return { connections: [] };
    }
    return this.disconnectAll();
  }
  async disconnectAll() {
    const wagmiConnections = getConnections(this.wagmiConfig);
    const connections = await Promise.allSettled(wagmiConnections.map(async (connection) => {
      const connector = this.getWagmiConnector(connection.connector.id);
      if (connector) {
        await disconnect(this.wagmiConfig, { connector });
      }
      return connection;
    }));
    this.wagmiConfig.state.connections.clear();
    return {
      connections: connections.filter((connection) => connection.status === "fulfilled").map(({ value: connection }) => ({
        accounts: connection.accounts.map((account) => ({
          address: account
        })),
        connectorId: connection.connector.id
      }))
    };
  }
  async switchNetwork(params) {
    const { caipNetwork } = params;
    const wagmiChain = this.wagmiConfig.chains.find((chain) => chain.id.toString() === caipNetwork.id.toString());
    await switchChain(this.wagmiConfig, {
      chainId: caipNetwork.id,
      addEthereumChainParameter: {
        chainName: wagmiChain?.name ?? caipNetwork.name,
        nativeCurrency: wagmiChain?.nativeCurrency ?? caipNetwork.nativeCurrency,
        rpcUrls: [
          caipNetwork.rpcUrls?.["chainDefault"]?.http?.[0] ?? wagmiChain?.rpcUrls?.default?.http?.[0] ?? ""
        ],
        blockExplorerUrls: [
          wagmiChain?.blockExplorers?.default?.url ?? caipNetwork.blockExplorers?.default?.url ?? ""
        ]
      }
    });
    await super.switchNetwork(params);
  }
  async getCapabilities(params) {
    if (!this.wagmiConfig) {
      throw new Error("connectionControllerClient:getCapabilities - wagmiConfig is undefined");
    }
    const connections = getConnections(this.wagmiConfig);
    const connection = connections[0];
    const connector = connection ? this.getWagmiConnector(connection.connector.id) : null;
    if (!connector) {
      throw new Error("connectionControllerClient:getCapabilities - connector is undefined");
    }
    const provider = await connector.getProvider();
    if (!provider) {
      throw new Error("connectionControllerClient:getCapabilities - provider is undefined");
    }
    return await provider.request({ method: "wallet_getCapabilities", params: [params] });
  }
  async grantPermissions(params) {
    if (!this.wagmiConfig) {
      throw new Error("connectionControllerClient:grantPermissions - wagmiConfig is undefined");
    }
    const connections = getConnections(this.wagmiConfig);
    const connection = connections[0];
    const connector = connection ? this.getWagmiConnector(connection.connector.id) : null;
    if (!connector) {
      throw new Error("connectionControllerClient:grantPermissions - connector is undefined");
    }
    const provider = await connector.getProvider();
    if (!provider) {
      throw new Error("connectionControllerClient:grantPermissions - provider is undefined");
    }
    return provider.request({ method: "wallet_grantPermissions", params });
  }
  async revokePermissions(params) {
    if (!this.wagmiConfig) {
      throw new Error("connectionControllerClient:revokePermissions - wagmiConfig is undefined");
    }
    const connections = getConnections(this.wagmiConfig);
    const connection = connections[0];
    const connector = connection ? this.getWagmiConnector(connection.connector.id) : null;
    if (!connector) {
      throw new Error("connectionControllerClient:revokePermissions - connector is undefined");
    }
    const provider = await connector.getProvider();
    if (!provider) {
      throw new Error("connectionControllerClient:revokePermissions - provider is undefined");
    }
    return provider.request({ method: "wallet_revokePermissions", params });
  }
  async walletGetAssets(params) {
    if (!this.wagmiConfig) {
      throw new Error("connectionControllerClient:walletGetAssets - wagmiConfig is undefined");
    }
    const connections = getConnections(this.wagmiConfig);
    const connection = connections[0];
    const connector = connection ? this.getWagmiConnector(connection.connector.id) : null;
    if (!connector) {
      throw new Error("connectionControllerClient:walletGetAssets - connector is undefined");
    }
    const provider = await connector.getProvider();
    if (!provider) {
      throw new Error("connectionControllerClient:walletGetAssets - provider is undefined");
    }
    return provider.request({ method: "wallet_getAssets", params: [params] });
  }
  setAuthProvider(authProvider) {
    if (!this.namespace) {
      throw new Error("WagmiAdapter:setAuthProvider - namespace is required");
    }
    this.addConnector({
      id: ConstantsUtil.CONNECTOR_ID.AUTH,
      type: "AUTH",
      name: ConstantsUtil.CONNECTOR_NAMES.AUTH,
      provider: authProvider,
      imageId: PresetsUtil.ConnectorImageIds[ConstantsUtil.CONNECTOR_ID.AUTH],
      chain: this.namespace,
      chains: []
    });
  }
  async setUniversalProvider(universalProvider) {
    universalProvider.on("connect", () => {
      const connections = getConnections(this.wagmiConfig);
      const connector = this.getWagmiConnector("walletConnect");
      if (connector && !connections.find((c) => c.connector.id === connector.id)) {
        if (ChainController.state.activeChain === "eip155") {
          return;
        }
        reconnect(this.wagmiConfig, {
          connectors: [connector]
        });
      }
    });
    this.addConnector(new WalletConnectConnector({
      provider: universalProvider,
      caipNetworks: this.getCaipNetworks(),
      namespace: "eip155"
    }));
    return Promise.resolve();
  }
};
export {
  WagmiAdapter,
  authConnector
};
//# sourceMappingURL=@reown_appkit-adapter-wagmi.js.map
