import type { CreateBulkOrdersAction, CreateOrderAction, ExchangeAction, ApprovalAction } from '@opensea/seaport-js/lib/types';
import type { ProgressStep } from './types';
import type { WrapperCurrencyConversionAction } from './handler/actions/weth.action';
import type { ContractMethodReturnType, TransactionMethods } from '@opensea/seaport-js/src/utils/usecase';
import type { SeaportContract } from '@opensea/seaport-js/src/types';
import type { OffChainCancelAction } from './handler/actions/offchain-cancel.action';
type CancelOrderAction = {
    type: 'cancelOrder';
    transactionMethods: TransactionMethods<ContractMethodReturnType<SeaportContract, 'cancel'>>;
};
export type BlockchainActions = CreateOrderAction | CreateBulkOrdersAction | ExchangeAction | ApprovalAction | WrapperCurrencyConversionAction | CancelOrderAction | OffChainCancelAction;
export declare const prepareActionSteps: (actions: ReadonlyArray<BlockchainActions>) => ProgressStep[];
export declare class Progress {
    items: ProgressStep[];
    currentStepIndex: number;
    totalSteps: number;
    private readonly progressCallback?;
    constructor(steps: ProgressStep[], progressCallback?: (progress: ProgressStep[]) => void);
    updateStep(index: number, updateInfo: Partial<ProgressStep>): void;
    completeStep(index: number, updateInfo?: Partial<ProgressStep>): void;
    setTransactionSubmitted(index: number, txHash: string, chainId: number): void;
    private notifyProgress;
    failStep(index: number, error: unknown): void;
    isComplete(): boolean;
}
export declare const executeAllActions: <R>(actions: ReadonlyArray<BlockchainActions>, options?: {
    onProgress?: (progress: ProgressStep[]) => void;
}) => Promise<R>;
export {};
//# sourceMappingURL=core.d.ts.map