import axios, { isAxiosError } from 'axios';
export class ApiClient {
    constructor(clientOptions) {
        this.clientOptions = clientOptions;
    }
    async createListing(params, options) {
        return this.makeRequest('/v1/orderbook/list', 'post', params, options);
    }
    async createBulkListing(params, options) {
        return this.makeRequest('/v1/orderbook/list/bulk', 'post', params, options);
    }
    async createOffer(params, options) {
        return this.makeRequest('/v1/orderbook/offer', 'post', params, options);
    }
    async getListing(params, options) {
        return this.makeRequest(`/v1/orderbook/listing/${params.orderId}/${params.fulFillerAddress}`, 'get', undefined, options);
    }
    async getOffer(params, options) {
        return this.makeRequest(`/v1/orderbook/offer/${params.orderId}/${params.fulFillerAddress}`, 'get', undefined, options);
    }
    async getOrderbookFee(params, options) {
        return this.makeRequest(`/v1/orderbook/fee/${params.orderbook}/${params.chainId}/${params.contractAddress}`, 'get', undefined, options);
    }
    async getSupportedCurrencies(params, options) {
        return this.makeRequest(`/v1/orderbook/currencies/${params.chainId}/${params.contractAddress}/${params.orderbook}`, 'get', undefined, options);
    }
    async cancelOffer(params, options) {
        return this.makeRequest('/v1/orderbook/offer/cancel', 'post', params, options);
    }
    async cancelListing(params, options) {
        return this.makeRequest('/v1/orderbook/listing/cancel', 'post', params, options);
    }
    async createBulkOffer(params, options) {
        return this.makeRequest('/v1/orderbook/offer/bulk', 'post', params, options);
    }
    async makeRequest(endpoint, method, data, options) {
        const finalHeaders = {
            ...(this.clientOptions.defaultHeaders || {}),
            ...(options?.customHeaders || {}),
        };
        // Set default Content-Type for relevant methods if data exists and not already set
        const hasData = data !== undefined && data !== null;
        const relevantMethodForContentType = method.toLowerCase() === 'post' ||
            method.toLowerCase() === 'put' ||
            method.toLowerCase() === 'patch';
        if (relevantMethodForContentType &&
            hasData &&
            !Object.keys(finalHeaders).some((key) => key.toLowerCase() === 'content-type')) {
            finalHeaders['Content-Type'] = 'application/json';
        }
        const axiosConfig = {
            url: `${this.clientOptions.baseUrl}${endpoint}`,
            method: method,
            timeout: options?.timeout,
            headers: finalHeaders,
        };
        if (method.toLowerCase() === 'get' || method.toLowerCase() === 'delete') {
            axiosConfig.params = data;
        }
        else if (hasData) {
            axiosConfig.data = data;
        }
        try {
            const response = await axios.request(axiosConfig);
            if (response.status < 200 || response.status >= 300) {
                throw new Error(`API request failed with status ${response.status}: ${response.statusText}`);
            }
            return response.data;
        }
        catch (error) {
            if (isAxiosError(error)) {
                let errorMessage = `API request failed: ${error.message}`;
                if (error.response) {
                    errorMessage = `API request failed with status ${error.response.status}: ${error.response.statusText}`;
                    if (error.response.data) {
                        const responseDataStr = JSON.stringify(error.response.data).substring(0, 200);
                        errorMessage += ` - Data: ${responseDataStr}`;
                    }
                }
                throw new Error(errorMessage);
            }
            throw error;
        }
    }
}
