import { ItemType } from '@opensea/seaport-js/lib/constants';
import { ZeroAddress } from 'ethers';
export function prepareFees(marketplaceFees) {
    return [
        ...(marketplaceFees || []).map((fee) => ({
            recipient: fee.recipient,
            basisPoints: fee.basisPoints,
        })),
    ];
}
export function buildListingOrderInput(item, sellerAddress, endTime, fees, zone, conduitKey) {
    const offerer = sellerAddress;
    const offerItems = [];
    if (item.itemType === ItemType.ERC1155) {
        offerItems.push({
            itemType: ItemType.ERC1155,
            token: item.contract,
            identifier: item.tokenId,
            amount: '1',
        });
    }
    else {
        offerItems.push({
            itemType: ItemType.ERC721,
            token: item.contract,
            identifier: item.tokenId,
        });
    }
    const considerationItems = [];
    if (item.currencyContractAddress && item.currencyContractAddress !== ZeroAddress) {
        considerationItems.push({
            token: item.currencyContractAddress,
            amount: item.price,
            recipient: offerer,
        });
    }
    else {
        considerationItems.push({
            amount: item.price,
            recipient: offerer,
        });
    }
    return {
        endTime: endTime.toString(),
        offer: offerItems,
        consideration: considerationItems,
        fees,
        zone,
        conduitKey,
        allowPartialFills: false,
        restrictedByZone: zone !== undefined,
    };
}
export function buildOfferOrderInput(item, buyerAddress, endTime, fees, zone, conduitKey) {
    const offerer = buyerAddress;
    const offerItems = [
        {
            token: item.currencyContractAddress,
            amount: item.price,
        },
    ];
    const considerationItems = [];
    if (item.itemType === ItemType.ERC1155) {
        considerationItems.push({
            itemType: ItemType.ERC1155,
            token: item.contract,
            identifier: item.tokenId,
            amount: '1',
            recipient: offerer,
        });
    }
    else {
        considerationItems.push({
            itemType: ItemType.ERC721,
            token: item.contract,
            identifier: item.tokenId,
            recipient: offerer,
        });
    }
    return {
        endTime: endTime.toString(),
        offer: offerItems,
        consideration: considerationItems,
        fees,
        zone,
        conduitKey,
        allowPartialFills: false,
        restrictedByZone: zone !== undefined,
    };
}
