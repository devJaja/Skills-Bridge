import { SeaportOperationHandler } from '../seaport-operation.handler';
import { DomaOrderbookError, DomaOrderbookErrorCode } from '../../errors';
import { createOffChainCancelAction } from '../actions/offchain-cancel.action';
import { parseChainId } from '../../utils/chain.utils';
export class CancelOfferHandler extends SeaportOperationHandler {
    async validateAndGetOffer(orderId, fulFillerAddress) {
        const offer = await this.apiClient.getOffer({
            orderId,
            fulFillerAddress,
        });
        if (!offer) {
            throw new DomaOrderbookError(DomaOrderbookErrorCode.ORDER_NOT_FOUND, 'Offer not found');
        }
        return offer;
    }
    async cancelOffChain(orderId) {
        const seaportAddress = await this.seaport.contract.getAddress();
        // Create the cancel action
        const offchainCancelAction = createOffChainCancelAction(this.signer, orderId, seaportAddress, parseChainId(this.chainId));
        const cancelResult = await this.executeBlockchainOperation([
            offchainCancelAction,
        ]);
        await this.apiClient.cancelOffer({
            orderId: orderId,
            signature: cancelResult.signature,
        });
        return {
            transactionHash: null,
            status: 'success',
            gasUsed: 0n,
            gasPrice: 0n,
        };
    }
    async cancelOnChain(offer) {
        // Use Seaport to cancel the order on-chain
        const cancelOrdersAction = this.seaport.cancelOrders([
            {
                ...offer.order.parameters,
            },
        ]);
        // Execute the cancellation transaction
        const result = await this.executeBlockchainOperation([
            {
                type: 'cancelOrder',
                transactionMethods: cancelOrdersAction,
            },
        ]);
        return {
            gasPrice: result.gasPrice,
            gasUsed: result.gasUsed,
            transactionHash: result.hash,
            status: result.status === 1 ? 'success' : 'reverted',
        };
    }
    async execute(params) {
        const walletAddress = await this.getWalletAddress();
        try {
            const offer = await this.validateAndGetOffer(params.orderId, walletAddress);
            if (params.cancellationType === 'off-chain') {
                return await this.cancelOffChain(params.orderId);
            }
            return await this.cancelOnChain(offer);
        }
        catch (error) {
            throw DomaOrderbookError.fromError(error, DomaOrderbookErrorCode.OFFER_CANCELLATION_FAILED, {
                chainId: this.chainId,
                params,
            });
        }
    }
}
