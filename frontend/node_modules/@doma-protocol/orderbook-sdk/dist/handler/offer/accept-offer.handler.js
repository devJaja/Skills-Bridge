import { SeaportOperationHandler } from '../seaport-operation.handler';
import { DomaOrderbookError, DomaOrderbookErrorCode } from '../../errors';
export class AcceptOfferHandler extends SeaportOperationHandler {
    async execute(params) {
        const walletAddress = await this.getWalletAddress();
        const offer = await this.apiClient.getOffer({
            orderId: params.orderId,
            fulFillerAddress: walletAddress,
        });
        if (!offer) {
            throw new DomaOrderbookError(DomaOrderbookErrorCode.ORDER_NOT_FOUND, 'Offer not found');
        }
        try {
            const orderUseCase = await this.seaport.fulfillOrder({
                order: {
                    signature: offer.order.signature,
                    parameters: offer.order.parameters,
                },
                extraData: offer.extraData || undefined,
                unitsToFill: offer.extraData ? 1n : undefined,
            });
            const result = await this.executeBlockchainOperation(orderUseCase.actions);
            return {
                gasPrice: result.gasPrice,
                gasUsed: result.gasUsed,
                transactionHash: result.hash,
                status: result.status === 1 ? 'success' : 'reverted',
            };
        }
        catch (error) {
            throw DomaOrderbookError.fromError(error, DomaOrderbookErrorCode.ACCEPT_OFFER_FAILED, {
                chainId: this.chainId,
                params,
            });
        }
    }
}
