import { executeAllActions } from '../core';
import { Seaport } from '@opensea/seaport-js';
import { DomaOrderbookError, DomaOrderbookErrorCode } from '../errors';
export class SeaportOperationHandler {
    constructor(config, apiClient, signer, chainId, onProgress, options = {}) {
        const { seaportBalanceAndApprovalChecksOnOrderCreation = true } = options;
        this.config = config;
        this.apiClient = apiClient;
        this.chainId = chainId;
        this.onProgress = onProgress;
        this.signer = signer;
        this.seaport = new Seaport(this.signer, {
            balanceAndApprovalChecksOnOrderCreation: seaportBalanceAndApprovalChecksOnOrderCreation,
        });
    }
    async getWalletAddress() {
        const walletAddress = await this.signer.getAddress();
        if (!walletAddress) {
            throw new DomaOrderbookError(DomaOrderbookErrorCode.SIGNER_NOT_PROVIDED, 'Wallet address not found');
        }
        return walletAddress;
    }
    async executeBlockchainOperation(actions) {
        return executeAllActions(actions, {
            onProgress: this.onProgress,
        });
    }
}
