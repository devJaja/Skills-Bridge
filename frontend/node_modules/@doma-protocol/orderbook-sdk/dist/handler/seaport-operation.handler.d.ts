import type { Caip2ChainId, DomaOrderbookSDKConfig, ProgressStep } from '../types';
import { type BlockchainActions } from '../core';
import type { ApiClient } from '../api/api.client';
import type { BlockchainOperationHandler } from './types';
import type { JsonRpcSigner } from 'ethers';
import { Seaport } from '@opensea/seaport-js';
export declare abstract class SeaportOperationHandler<TParams, TResult> implements BlockchainOperationHandler<TParams, TResult> {
    protected apiClient: ApiClient;
    protected chainId: Caip2ChainId;
    protected config: DomaOrderbookSDKConfig;
    protected onProgress?: (progress: ProgressStep[]) => void;
    protected signer: JsonRpcSigner;
    protected seaport: Seaport;
    constructor(config: DomaOrderbookSDKConfig, apiClient: ApiClient, signer: JsonRpcSigner, chainId: Caip2ChainId, onProgress?: (progress: ProgressStep[]) => void, options?: {
        seaportBalanceAndApprovalChecksOnOrderCreation?: boolean;
    });
    protected getWalletAddress(): Promise<string>;
    protected executeBlockchainOperation<R>(actions: ReadonlyArray<BlockchainActions>): Promise<R>;
    abstract execute(params: TParams): Promise<TResult>;
}
//# sourceMappingURL=seaport-operation.handler.d.ts.map