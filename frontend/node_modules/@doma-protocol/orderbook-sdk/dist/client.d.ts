import type { Caip2ChainId, DomaOrderbookSDKConfig, OnProgressCallback } from './types';
import type { BuyListingParams, BuyListingResult, CancelListingParams, CancelListingResult, CreateListingParams, CreateListingResult } from './handler/listing/types';
import type { AcceptOfferParams, AcceptOfferResult, CancelOfferParams, CancelOfferResult, CreateOfferParams, CreateOfferResult } from './handler/offer/types';
import type { GetOrderbookFeeRequest, GetOrderbookFeeResponse, GetSupportedCurrenciesRequest, GetSupportedCurrenciesResponse } from './api/types';
import type { JsonRpcSigner } from 'ethers';
export declare class DomaOrderbookSDK {
    readonly config: DomaOrderbookSDKConfig;
    private readonly apiClient;
    constructor(config: DomaOrderbookSDKConfig);
    private validateSignerAndChainProvided;
    private fetchFeesIfNeeded;
    createListing({ params, signer, chainId, onProgress, }: {
        params: CreateListingParams;
        signer: JsonRpcSigner;
        chainId: Caip2ChainId;
        onProgress: OnProgressCallback;
    }): Promise<CreateListingResult>;
    buyListing({ params, signer, chainId, onProgress, }: {
        params: BuyListingParams;
        signer: JsonRpcSigner;
        chainId: Caip2ChainId;
        onProgress: OnProgressCallback;
    }): Promise<BuyListingResult>;
    createOffer({ params, signer, chainId, onProgress, }: {
        params: CreateOfferParams;
        signer: JsonRpcSigner;
        chainId: Caip2ChainId;
        onProgress: OnProgressCallback;
    }): Promise<CreateOfferResult>;
    acceptOffer({ params, signer, chainId, onProgress, }: {
        params: AcceptOfferParams;
        signer: JsonRpcSigner;
        chainId: Caip2ChainId;
        onProgress: OnProgressCallback;
    }): Promise<AcceptOfferResult>;
    cancelListing({ params, signer, chainId, onProgress, }: {
        params: CancelListingParams;
        signer: JsonRpcSigner;
        chainId: Caip2ChainId;
        onProgress: OnProgressCallback;
    }): Promise<CancelListingResult>;
    cancelOffer({ params, signer, chainId, onProgress, }: {
        params: CancelOfferParams;
        signer: JsonRpcSigner;
        chainId: Caip2ChainId;
        onProgress: OnProgressCallback;
    }): Promise<CancelOfferResult>;
    getOrderbookFee(params: GetOrderbookFeeRequest): Promise<GetOrderbookFeeResponse>;
    getSupportedCurrencies(params: GetSupportedCurrenciesRequest): Promise<GetSupportedCurrenciesResponse>;
}
export declare const createDomaOrderbookClient: (config: DomaOrderbookSDKConfig) => DomaOrderbookSDK;
export declare const getDomaOrderbookClient: () => DomaOrderbookSDK;
//# sourceMappingURL=client.d.ts.map