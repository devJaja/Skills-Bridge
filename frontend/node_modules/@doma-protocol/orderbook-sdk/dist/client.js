import { ListingHandler } from './handler/listing/create-listing.handler';
import { ApiClient } from './api/api.client';
import { DomaOrderbookError, DomaOrderbookErrorCode } from './errors';
import { BuyListingHandler } from './handler/listing/buy-listing.handler';
import { CreateOfferHandler } from './handler/offer/create-offer.handler';
import { AcceptOfferHandler } from './handler/offer/accept-offer.handler';
import { CancelOfferHandler } from './handler/offer/cancel-offer.handler';
import { CancelListingHandler } from './handler/listing/cancel-listing.handler';
export class DomaOrderbookSDK {
    constructor(config) {
        this.config = config;
        this.apiClient = new ApiClient(config.apiClientOptions);
    }
    validateSignerAndChainProvided(signer, chainId) {
        if (!signer) {
            throw new DomaOrderbookError(DomaOrderbookErrorCode.SIGNER_NOT_PROVIDED, 'Signer must be provided');
        }
        if (!chainId) {
            throw new DomaOrderbookError(DomaOrderbookErrorCode.INVALID_PARAMETERS, 'Chain ID must be provided');
        }
    }
    async fetchFeesIfNeeded(params, chainId) {
        // if provided just return
        if (params.marketplaceFees) {
            return params.marketplaceFees;
        }
        const feeRequest = {
            contractAddress: params.items[0].contract,
            chainId: chainId,
            orderbook: params.orderbook,
        };
        try {
            const feeResponse = await this.getOrderbookFee(feeRequest);
            return params.marketplaceFees || feeResponse.marketplaceFees || [];
        }
        catch (error) {
            throw DomaOrderbookError.fromError(error, DomaOrderbookErrorCode.FETCH_FEES_FAILED, {
                chainId,
                params,
            });
        }
    }
    async createListing({ params, signer, chainId, onProgress, }) {
        this.validateSignerAndChainProvided(signer, chainId);
        // set fees
        const marketplaceFees = await this.fetchFeesIfNeeded(params, chainId);
        const paramsWithFees = {
            ...params,
            marketplaceFees,
        };
        const handler = new ListingHandler(this.config, this.apiClient, signer, chainId, onProgress);
        return handler.execute(paramsWithFees);
    }
    async buyListing({ params, signer, chainId, onProgress, }) {
        this.validateSignerAndChainProvided(signer, chainId);
        const handler = new BuyListingHandler(this.config, this.apiClient, signer, chainId, onProgress);
        return handler.execute(params);
    }
    async createOffer({ params, signer, chainId, onProgress, }) {
        this.validateSignerAndChainProvided(signer, chainId);
        // Fetch fees if needed
        const marketplaceFees = await this.fetchFeesIfNeeded(params, chainId);
        const paramsWithFee = {
            ...params,
            marketplaceFees,
        };
        const handler = new CreateOfferHandler(this.config, this.apiClient, signer, chainId, onProgress, {
            seaportBalanceAndApprovalChecksOnOrderCreation: false,
        });
        return handler.execute(paramsWithFee);
    }
    async acceptOffer({ params, signer, chainId, onProgress, }) {
        this.validateSignerAndChainProvided(signer, chainId);
        const handler = new AcceptOfferHandler(this.config, this.apiClient, signer, chainId, onProgress);
        return handler.execute(params);
    }
    async cancelListing({ params, signer, chainId, onProgress, }) {
        this.validateSignerAndChainProvided(signer, chainId);
        const handler = new CancelListingHandler(this.config, this.apiClient, signer, chainId, onProgress);
        return handler.execute(params);
    }
    async cancelOffer({ params, signer, chainId, onProgress, }) {
        this.validateSignerAndChainProvided(signer, chainId);
        const handler = new CancelOfferHandler(this.config, this.apiClient, signer, chainId, onProgress);
        return handler.execute(params);
    }
    async getOrderbookFee(params) {
        return this.apiClient.getOrderbookFee(params);
    }
    async getSupportedCurrencies(params) {
        return this.apiClient.getSupportedCurrencies(params);
    }
}
let client = null;
export const createDomaOrderbookClient = (config) => {
    client = new DomaOrderbookSDK(config);
    return client;
};
export const getDomaOrderbookClient = () => {
    if (!client) {
        throw new DomaOrderbookError(DomaOrderbookErrorCode.CLIENT_NOT_INITIALIZED, 'DomaOrderbookClient not initialized. Call createDomaOrderbookClient first.');
    }
    return client;
};
